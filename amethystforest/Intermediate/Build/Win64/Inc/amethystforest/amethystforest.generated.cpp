// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Public/amethystforest.h"
#include "amethystforest.generated.dep.h"
void EmptyLinkFunctionForGeneratedCodeamethystforest() {}
	void AAmethystAIController::StaticRegisterNativesAAmethystAIController()
	{
		FNativeFunctionRegistrar::RegisterFunction(AAmethystAIController::StaticClass(),"CheckAmmo",(Native)&AAmethystAIController::execCheckAmmo);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystAIController::StaticClass(),"GetEnemy",(Native)&AAmethystAIController::execGetEnemy);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystAIController::StaticClass(),"PawnCanBeSeen",(Native)&AAmethystAIController::execPawnCanBeSeen);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystAIController::StaticClass(),"SearchEnemyInView",(Native)&AAmethystAIController::execSearchEnemyInView);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystAIController::StaticClass(),"SetEnemy",(Native)&AAmethystAIController::execSetEnemy);
	}
	IMPLEMENT_CLASS(AAmethystAIController);
	void AAmethystCharacter::StaticRegisterNativesAAmethystCharacter()
	{
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"GetAimOffsets",(Native)&AAmethystCharacter::execGetAimOffsets);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"GetRunningSpeedModifier",(Native)&AAmethystCharacter::execGetRunningSpeedModifier);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"GetTargetingSpeedModifier",(Native)&AAmethystCharacter::execGetTargetingSpeedModifier);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"GetWeapon",(Native)&AAmethystCharacter::execGetWeapon);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"IsFiring",(Native)&AAmethystCharacter::execIsFiring);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"IsFirstPerson",(Native)&AAmethystCharacter::execIsFirstPerson);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"IsRunning",(Native)&AAmethystCharacter::execIsRunning);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"IsTargeting",(Native)&AAmethystCharacter::execIsTargeting);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"OnRep_CurrentWeapon",(Native)&AAmethystCharacter::execOnRep_CurrentWeapon);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"ServerEquipWeapon",(Native)&AAmethystCharacter::execServerEquipWeapon);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"ServerSetRunning",(Native)&AAmethystCharacter::execServerSetRunning);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystCharacter::StaticClass(),"ServerSetTargeting",(Native)&AAmethystCharacter::execServerSetTargeting);
	}
	IMPLEMENT_CLASS(AAmethystCharacter);
	void AAmethystCharacter::ServerEquipWeapon(class AAmethystWeapon* NewWeapon)
	{
		AmethystCharacter_eventServerEquipWeapon_Parms Parms;
		Parms.NewWeapon=NewWeapon;
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerEquipWeapon),&Parms);
	}
	void AAmethystCharacter::ServerSetRunning(bool bNewRunning, bool bToggle)
	{
		AmethystCharacter_eventServerSetRunning_Parms Parms;
		Parms.bNewRunning=bNewRunning ? true : false;
		Parms.bToggle=bToggle ? true : false;
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerSetRunning),&Parms);
	}
	void AAmethystCharacter::ServerSetTargeting(bool bNewTargeting)
	{
		AmethystCharacter_eventServerSetTargeting_Parms Parms;
		Parms.bNewTargeting=bNewTargeting ? true : false;
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerSetTargeting),&Parms);
	}
	void AAmethystBot::StaticRegisterNativesAAmethystBot()
	{
		FNativeFunctionRegistrar::RegisterFunction(AAmethystBot::StaticClass(),"PerformMeleeAttack",(Native)&AAmethystBot::execPerformMeleeAttack);
	}
	IMPLEMENT_CLASS(AAmethystBot);
	void UAmethystCharMovementComponent::StaticRegisterNativesUAmethystCharMovementComponent()
	{
	}
	IMPLEMENT_CLASS(UAmethystCharMovementComponent);
	void UAmethystDamageType::StaticRegisterNativesUAmethystDamageType()
	{
	}
	IMPLEMENT_CLASS(UAmethystDamageType);
	void AamethystforestGameMode::StaticRegisterNativesAamethystforestGameMode()
	{
	}
	IMPLEMENT_CLASS(AamethystforestGameMode);
	void AamethystforestPlayerController::StaticRegisterNativesAamethystforestPlayerController()
	{
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"ClientEndOnlineGame",(Native)&AamethystforestPlayerController::execClientEndOnlineGame);
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"ClientGameStarted",(Native)&AamethystforestPlayerController::execClientGameStarted);
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"ClientSetSpectatorCamera",(Native)&AamethystforestPlayerController::execClientSetSpectatorCamera);
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"ClientStartOnlineGame",(Native)&AamethystforestPlayerController::execClientStartOnlineGame);
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"Say",(Native)&AamethystforestPlayerController::execSay);
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"ServerCheat",(Native)&AamethystforestPlayerController::execServerCheat);
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"ServerSay",(Native)&AamethystforestPlayerController::execServerSay);
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"ServerSuicide",(Native)&AamethystforestPlayerController::execServerSuicide);
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"SetGodMode",(Native)&AamethystforestPlayerController::execSetGodMode);
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"SimulateInputKey",(Native)&AamethystforestPlayerController::execSimulateInputKey);
		FNativeFunctionRegistrar::RegisterFunction(AamethystforestPlayerController::StaticClass(),"Suicide",(Native)&AamethystforestPlayerController::execSuicide);
	}
	IMPLEMENT_CLASS(AamethystforestPlayerController);
	void AamethystforestPlayerController::ClientEndOnlineGame()
	{
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ClientEndOnlineGame),NULL);
	}
	void AamethystforestPlayerController::ClientGameStarted()
	{
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ClientGameStarted),NULL);
	}
	void AamethystforestPlayerController::ClientSetSpectatorCamera(FVector CameraLocation, FRotator CameraRotation)
	{
		amethystforestPlayerController_eventClientSetSpectatorCamera_Parms Parms;
		Parms.CameraLocation=CameraLocation;
		Parms.CameraRotation=CameraRotation;
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ClientSetSpectatorCamera),&Parms);
	}
	void AamethystforestPlayerController::ClientStartOnlineGame()
	{
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ClientStartOnlineGame),NULL);
	}
	void AamethystforestPlayerController::ServerCheat(const FString& Msg)
	{
		amethystforestPlayerController_eventServerCheat_Parms Parms;
		Parms.Msg=Msg;
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerCheat),&Parms);
	}
	void AamethystforestPlayerController::ServerSay(const FString& Msg)
	{
		amethystforestPlayerController_eventServerSay_Parms Parms;
		Parms.Msg=Msg;
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerSay),&Parms);
	}
	void AamethystforestPlayerController::ServerSuicide()
	{
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerSuicide),NULL);
	}
class UScriptStruct* FWeaponData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern AMETHYSTFOREST_API class UScriptStruct* Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponData();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponData, AAmethystWeapon::StaticClass(), TEXT("WeaponData"));
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FWeaponData(FWeaponData::StaticStruct);
class UScriptStruct* FWeaponAnim::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern AMETHYSTFOREST_API class UScriptStruct* Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponAnim();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponAnim, AAmethystWeapon::StaticClass(), TEXT("WeaponAnim"));
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FWeaponAnim(FWeaponAnim::StaticStruct);
	void AAmethystWeapon::StaticRegisterNativesAAmethystWeapon()
	{
		FNativeFunctionRegistrar::RegisterFunction(AAmethystWeapon::StaticClass(),"ClientStartReload",(Native)&AAmethystWeapon::execClientStartReload);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystWeapon::StaticClass(),"GetPawnOwner",(Native)&AAmethystWeapon::execGetPawnOwner);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystWeapon::StaticClass(),"OnRep_BurstCounter",(Native)&AAmethystWeapon::execOnRep_BurstCounter);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystWeapon::StaticClass(),"OnRep_MyPawn",(Native)&AAmethystWeapon::execOnRep_MyPawn);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystWeapon::StaticClass(),"OnRep_Reload",(Native)&AAmethystWeapon::execOnRep_Reload);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystWeapon::StaticClass(),"ServerHandleFiring",(Native)&AAmethystWeapon::execServerHandleFiring);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystWeapon::StaticClass(),"ServerStartFire",(Native)&AAmethystWeapon::execServerStartFire);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystWeapon::StaticClass(),"ServerStartReload",(Native)&AAmethystWeapon::execServerStartReload);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystWeapon::StaticClass(),"ServerStopFire",(Native)&AAmethystWeapon::execServerStopFire);
		FNativeFunctionRegistrar::RegisterFunction(AAmethystWeapon::StaticClass(),"ServerStopReload",(Native)&AAmethystWeapon::execServerStopReload);
		UScriptStruct::DeferCppStructOps(FName(TEXT("WeaponAnim")),new UScriptStruct::TCppStructOps<FWeaponAnim>);
		UScriptStruct::DeferCppStructOps(FName(TEXT("WeaponData")),new UScriptStruct::TCppStructOps<FWeaponData>);
	}
	IMPLEMENT_CLASS(AAmethystWeapon);
	void AAmethystWeapon::ClientStartReload()
	{
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ClientStartReload),NULL);
	}
	void AAmethystWeapon::ServerHandleFiring()
	{
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerHandleFiring),NULL);
	}
	void AAmethystWeapon::ServerStartFire()
	{
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerStartFire),NULL);
	}
	void AAmethystWeapon::ServerStartReload()
	{
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerStartReload),NULL);
	}
	void AAmethystWeapon::ServerStopFire()
	{
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerStopFire),NULL);
	}
	void AAmethystWeapon::ServerStopReload()
	{
		ProcessEvent(FindFunctionChecked(AMETHYSTFOREST_ServerStopReload),NULL);
	}
FName AMETHYSTFOREST_ClientEndOnlineGame = FName(TEXT("ClientEndOnlineGame"));
FName AMETHYSTFOREST_ClientGameStarted = FName(TEXT("ClientGameStarted"));
FName AMETHYSTFOREST_ClientSetSpectatorCamera = FName(TEXT("ClientSetSpectatorCamera"));
FName AMETHYSTFOREST_ClientStartOnlineGame = FName(TEXT("ClientStartOnlineGame"));
FName AMETHYSTFOREST_ClientStartReload = FName(TEXT("ClientStartReload"));
FName AMETHYSTFOREST_ServerCheat = FName(TEXT("ServerCheat"));
FName AMETHYSTFOREST_ServerEquipWeapon = FName(TEXT("ServerEquipWeapon"));
FName AMETHYSTFOREST_ServerHandleFiring = FName(TEXT("ServerHandleFiring"));
FName AMETHYSTFOREST_ServerSay = FName(TEXT("ServerSay"));
FName AMETHYSTFOREST_ServerSetRunning = FName(TEXT("ServerSetRunning"));
FName AMETHYSTFOREST_ServerSetTargeting = FName(TEXT("ServerSetTargeting"));
FName AMETHYSTFOREST_ServerStartFire = FName(TEXT("ServerStartFire"));
FName AMETHYSTFOREST_ServerStartReload = FName(TEXT("ServerStartReload"));
FName AMETHYSTFOREST_ServerStopFire = FName(TEXT("ServerStopFire"));
FName AMETHYSTFOREST_ServerStopReload = FName(TEXT("ServerStopReload"));
FName AMETHYSTFOREST_ServerSuicide = FName(TEXT("ServerSuicide"));
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_APawn_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_AAIController();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTreeComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardComponent_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_UObject_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTree_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackEffect_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_UCanvas_FCanvasIcon();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_UObject_FVector();
	INPUTCORE_API class UScriptStruct* Z_Construct_UScriptStruct_UInputCoreTypes_FKey();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraShake_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemComponent_NoRegister();

	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystAIController_CheckAmmo();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystAIController_GetEnemy();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystAIController_PawnCanBeSeen();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystAIController_SearchEnemyInView();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystAIController_SetEnemy();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AAmethystAIController_NoRegister();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AAmethystAIController();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_GetAimOffsets();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_GetRunningSpeedModifier();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_GetTargetingSpeedModifier();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_GetWeapon();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_IsFiring();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_IsFirstPerson();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_IsRunning();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_IsTargeting();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_OnRep_CurrentWeapon();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_ServerEquipWeapon();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_ServerSetRunning();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystCharacter_ServerSetTargeting();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AAmethystCharacter_NoRegister();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AAmethystCharacter();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystBot_PerformMeleeAttack();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AAmethystBot_NoRegister();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AAmethystBot();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_UAmethystCharMovementComponent_NoRegister();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_UAmethystCharMovementComponent();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_UAmethystDamageType_NoRegister();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_UAmethystDamageType();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AamethystforestGameMode_NoRegister();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AamethystforestGameMode();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ClientEndOnlineGame();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ClientGameStarted();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ClientSetSpectatorCamera();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ClientStartOnlineGame();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_Say();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ServerCheat();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ServerSay();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ServerSuicide();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_SetGodMode();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_SimulateInputKey();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AamethystforestPlayerController_Suicide();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AamethystforestPlayerController_NoRegister();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AamethystforestPlayerController();
	AMETHYSTFOREST_API class UScriptStruct* Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponAnim();
	AMETHYSTFOREST_API class UScriptStruct* Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponData();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystWeapon_ClientStartReload();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystWeapon_GetPawnOwner();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystWeapon_OnRep_BurstCounter();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystWeapon_OnRep_MyPawn();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystWeapon_OnRep_Reload();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystWeapon_ServerHandleFiring();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystWeapon_ServerStartFire();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystWeapon_ServerStartReload();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystWeapon_ServerStopFire();
	AMETHYSTFOREST_API class UFunction* Z_Construct_UFunction_AAmethystWeapon_ServerStopReload();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AAmethystWeapon_NoRegister();
	AMETHYSTFOREST_API class UClass* Z_Construct_UClass_AAmethystWeapon();
	AMETHYSTFOREST_API class UPackage* Z_Construct_UPackage_amethystforest();
	UFunction* Z_Construct_UFunction_AAmethystAIController_CheckAmmo()
	{
		struct AmethystAIController_eventCheckAmmo_Parms
		{
			const class AAmethystWeapon* CurrentWeapon;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystAIController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("CheckAmmo"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04020401, 65535, sizeof(AmethystAIController_eventCheckAmmo_Parms));
			UProperty* NewProp_CurrentWeapon = new(ReturnFunction, TEXT("CurrentWeapon"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurrentWeapon, AmethystAIController_eventCheckAmmo_Parms), 0x0000000000000082, Z_Construct_UClass_AAmethystWeapon_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
			MetaData->SetValue(NewProp_CurrentWeapon, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystAIController_GetEnemy()
	{
		struct AmethystAIController_eventGetEnemy_Parms
		{
			class AAmethystCharacter* ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystAIController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("GetEnemy"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x54020401, 65535, sizeof(AmethystAIController_eventGetEnemy_Parms));
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AmethystAIController_eventGetEnemy_Parms), 0x0000000000000580, Z_Construct_UClass_AAmethystCharacter_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystAIController_PawnCanBeSeen()
	{
		struct AmethystAIController_eventPawnCanBeSeen_Parms
		{
			class APawn* Target;
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystAIController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("PawnCanBeSeen"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04020401, 65535, sizeof(AmethystAIController_eventPawnCanBeSeen_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AmethystAIController_eventPawnCanBeSeen_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AmethystAIController_eventPawnCanBeSeen_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AmethystAIController_eventPawnCanBeSeen_Parms), sizeof(bool), true);
			UProperty* NewProp_Target = new(ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Target, AmethystAIController_eventPawnCanBeSeen_Parms), 0x0000000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behaviour"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
			MetaData->SetValue(NewProp_Target, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystAIController_SearchEnemyInView()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystAIController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("SearchEnemyInView"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behaviour"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks sight to all pawns in map, sets enemy if it finds a thing"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystAIController_SetEnemy()
	{
		struct AmethystAIController_eventSetEnemy_Parms
		{
			class APawn* inPawn;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystAIController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("SetEnemy"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04020401, 65535, sizeof(AmethystAIController_eventSetEnemy_Parms));
			UProperty* NewProp_inPawn = new(ReturnFunction, TEXT("inPawn"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(inPawn, AmethystAIController_eventSetEnemy_Parms), 0x0000000000000080, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
			MetaData->SetValue(NewProp_inPawn, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AAmethystAIController_NoRegister()
	{
		return AAmethystAIController::StaticClass();
	}
	UClass* Z_Construct_UClass_AAmethystAIController()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AAIController();
			Z_Construct_UPackage_amethystforest();
			OuterClass = AAmethystAIController::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00900280;

			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystAIController_CheckAmmo());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystAIController_GetEnemy());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystAIController_PawnCanBeSeen());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystAIController_SearchEnemyInView());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystAIController_SetEnemy());

			UProperty* NewProp_BehaviorComp = new(OuterClass, TEXT("BehaviorComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BehaviorComp, AAmethystAIController), 0x0000000004482008, Z_Construct_UClass_UBehaviorTreeComponent_NoRegister());
			UProperty* NewProp_BlackboardComp = new(OuterClass, TEXT("BlackboardComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BlackboardComp, AAmethystAIController), 0x0000000004482008, Z_Construct_UClass_UBlackboardComponent_NoRegister());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystAIController_CheckAmmo());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystAIController_GetEnemy());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystAIController_PawnCanBeSeen());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystAIController_SearchEnemyInView());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystAIController_SetEnemy());
			OuterClass->ClassConfigName = FName(TEXT("Game"));
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Rendering Utilities|Transformation"));
			MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Bots/AmethystAIController.h"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
			MetaData->SetValue(NewProp_BehaviorComp, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
			MetaData->SetValue(NewProp_BlackboardComp, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystAIController.h"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AAmethystAIController(Z_Construct_UClass_AAmethystAIController);
	UFunction* Z_Construct_UFunction_AAmethystCharacter_GetAimOffsets()
	{
		struct AmethystCharacter_eventGetAimOffsets_Parms
		{
			FRotator ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("GetAimOffsets"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x54820401, 65535, sizeof(AmethystCharacter_eventGetAimOffsets_Parms));
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, AmethystCharacter_eventGetAimOffsets_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_UObject_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get aim offsets"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_GetRunningSpeedModifier()
	{
		struct AmethystCharacter_eventGetRunningSpeedModifier_Parms
		{
			float ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("GetRunningSpeedModifier"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x54020401, 65535, sizeof(AmethystCharacter_eventGetRunningSpeedModifier_Parms));
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AmethystCharacter_eventGetRunningSpeedModifier_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get the modifier value for running speed"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_GetTargetingSpeedModifier()
	{
		struct AmethystCharacter_eventGetTargetingSpeedModifier_Parms
		{
			float ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("GetTargetingSpeedModifier"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x54020401, 65535, sizeof(AmethystCharacter_eventGetTargetingSpeedModifier_Parms));
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, AmethystCharacter_eventGetTargetingSpeedModifier_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get weapon taget modifier speed"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_GetWeapon()
	{
		struct AmethystCharacter_eventGetWeapon_Parms
		{
			class AAmethystWeapon* ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("GetWeapon"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x54020401, 65535, sizeof(AmethystCharacter_eventGetWeapon_Parms));
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AmethystCharacter_eventGetWeapon_Parms), 0x0000000000000580, Z_Construct_UClass_AAmethystWeapon_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get currently equipped weapon"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_IsFiring()
	{
		struct AmethystCharacter_eventIsFiring_Parms
		{
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("IsFiring"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x54020401, 65535, sizeof(AmethystCharacter_eventIsFiring_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AmethystCharacter_eventIsFiring_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AmethystCharacter_eventIsFiring_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AmethystCharacter_eventIsFiring_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get firing state"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_IsFirstPerson()
	{
		struct AmethystCharacter_eventIsFirstPerson_Parms
		{
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("IsFirstPerson"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x54020400, 65535, sizeof(AmethystCharacter_eventIsFirstPerson_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AmethystCharacter_eventIsFirstPerson_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AmethystCharacter_eventIsFirstPerson_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AmethystCharacter_eventIsFirstPerson_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Mesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get camera view type"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_IsRunning()
	{
		struct AmethystCharacter_eventIsRunning_Parms
		{
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("IsRunning"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x54020401, 65535, sizeof(AmethystCharacter_eventIsRunning_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AmethystCharacter_eventIsRunning_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AmethystCharacter_eventIsRunning_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AmethystCharacter_eventIsRunning_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get running state"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_IsTargeting()
	{
		struct AmethystCharacter_eventIsTargeting_Parms
		{
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("IsTargeting"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x54020401, 65535, sizeof(AmethystCharacter_eventIsTargeting_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, AmethystCharacter_eventIsTargeting_Parms, bool);
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, AmethystCharacter_eventIsTargeting_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, AmethystCharacter_eventIsTargeting_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get targeting state"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_OnRep_CurrentWeapon()
	{
		struct AmethystCharacter_eventOnRep_CurrentWeapon_Parms
		{
			class AAmethystWeapon* LastWeapon;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("OnRep_CurrentWeapon"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535, sizeof(AmethystCharacter_eventOnRep_CurrentWeapon_Parms));
			UProperty* NewProp_LastWeapon = new(ReturnFunction, TEXT("LastWeapon"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LastWeapon, AmethystCharacter_eventOnRep_CurrentWeapon_Parms), 0x0000000000000080, Z_Construct_UClass_AAmethystWeapon_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("current weapon rep handler"));
			MetaData->SetValue(NewProp_LastWeapon, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_ServerEquipWeapon()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerEquipWeapon"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80280CC0, 65535, sizeof(AmethystCharacter_eventServerEquipWeapon_Parms));
			UProperty* NewProp_NewWeapon = new(ReturnFunction, TEXT("NewWeapon"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(NewWeapon, AmethystCharacter_eventServerEquipWeapon_Parms), 0x0000000000000080, Z_Construct_UClass_AAmethystWeapon_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("equip weapon"));
			MetaData->SetValue(NewProp_NewWeapon, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_ServerSetRunning()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerSetRunning"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80280CC0, 65535, sizeof(AmethystCharacter_eventServerSetRunning_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bToggle, AmethystCharacter_eventServerSetRunning_Parms, bool);
			UProperty* NewProp_bToggle = new(ReturnFunction, TEXT("bToggle"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bToggle, AmethystCharacter_eventServerSetRunning_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bToggle, AmethystCharacter_eventServerSetRunning_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNewRunning, AmethystCharacter_eventServerSetRunning_Parms, bool);
			UProperty* NewProp_bNewRunning = new(ReturnFunction, TEXT("bNewRunning"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNewRunning, AmethystCharacter_eventServerSetRunning_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bNewRunning, AmethystCharacter_eventServerSetRunning_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("update targeting state"));
			MetaData->SetValue(NewProp_bToggle, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_bNewRunning, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystCharacter_ServerSetTargeting()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerSetTargeting"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80280CC0, 65535, sizeof(AmethystCharacter_eventServerSetTargeting_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNewTargeting, AmethystCharacter_eventServerSetTargeting_Parms, bool);
			UProperty* NewProp_bNewTargeting = new(ReturnFunction, TEXT("bNewTargeting"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNewTargeting, AmethystCharacter_eventServerSetTargeting_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bNewTargeting, AmethystCharacter_eventServerSetTargeting_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("update targeting state"));
			MetaData->SetValue(NewProp_bNewTargeting, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AAmethystCharacter_NoRegister()
	{
		return AAmethystCharacter::StaticClass();
	}
	UClass* Z_Construct_UClass_AAmethystCharacter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACharacter();
			Z_Construct_UPackage_amethystforest();
			OuterClass = AAmethystCharacter::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00800081;

			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_GetAimOffsets());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_GetRunningSpeedModifier());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_GetTargetingSpeedModifier());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_GetWeapon());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_IsFiring());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_IsFirstPerson());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_IsRunning());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_IsTargeting());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_OnRep_CurrentWeapon());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_ServerEquipWeapon());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_ServerSetRunning());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystCharacter_ServerSetTargeting());

			UProperty* NewProp_Health = new(OuterClass, TEXT("Health"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Health, AAmethystCharacter), 0x0000000000000025);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsDying, AAmethystCharacter, uint8);
			UProperty* NewProp_bIsDying = new(OuterClass, TEXT("bIsDying"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsDying, AAmethystCharacter), 0x0000000000020015, CPP_BOOL_PROPERTY_BITMASK(bIsDying, AAmethystCharacter), sizeof(uint8), false);
			UProperty* NewProp_LowHealthWarningPlayer = new(OuterClass, TEXT("LowHealthWarningPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LowHealthWarningPlayer, AAmethystCharacter), 0x0000080004080008, Z_Construct_UClass_UAudioComponent_NoRegister());
			UProperty* NewProp_RunLoopAC = new(OuterClass, TEXT("RunLoopAC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RunLoopAC, AAmethystCharacter), 0x0000080004080008, Z_Construct_UClass_UAudioComponent_NoRegister());
			UProperty* NewProp_TargetingSound = new(OuterClass, TEXT("TargetingSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TargetingSound, AAmethystCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_RunStopSound = new(OuterClass, TEXT("RunStopSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RunStopSound, AAmethystCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_RunLoopSound = new(OuterClass, TEXT("RunLoopSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RunLoopSound, AAmethystCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_LowHealthSound = new(OuterClass, TEXT("LowHealthSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LowHealthSound, AAmethystCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_RespawnSound = new(OuterClass, TEXT("RespawnSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RespawnSound, AAmethystCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_RespawnFX = new(OuterClass, TEXT("RespawnFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RespawnFX, AAmethystCharacter), 0x0000080000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
			UProperty* NewProp_DeathSound = new(OuterClass, TEXT("DeathSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DeathSound, AAmethystCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_DeathAnim = new(OuterClass, TEXT("DeathAnim"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DeathAnim, AAmethystCharacter), 0x0000080000010001, Z_Construct_UClass_UAnimMontage_NoRegister());
			UProperty* NewProp_MeshMIDs = new(OuterClass, TEXT("MeshMIDs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MeshMIDs, AAmethystCharacter), 0x0000080000002000);
			UProperty* NewProp_MeshMIDs_Inner = new(NewProp_MeshMIDs, TEXT("MeshMIDs"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FPostConstructInitializeProperties(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWantsToRun, AAmethystCharacter, uint8);
			UProperty* NewProp_bWantsToRun = new(OuterClass, TEXT("bWantsToRun"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWantsToRun, AAmethystCharacter), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bWantsToRun, AAmethystCharacter), sizeof(uint8), false);
			UProperty* NewProp_RunningSpeedModifier = new(OuterClass, TEXT("RunningSpeedModifier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RunningSpeedModifier, AAmethystCharacter), 0x0000080000010001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTargeting, AAmethystCharacter, uint8);
			UProperty* NewProp_bIsTargeting = new(OuterClass, TEXT("bIsTargeting"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTargeting, AAmethystCharacter), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bIsTargeting, AAmethystCharacter), sizeof(uint8), false);
			UProperty* NewProp_TargetingSpeedModifier = new(OuterClass, TEXT("TargetingSpeedModifier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TargetingSpeedModifier, AAmethystCharacter), 0x0000080000010001);
			UProperty* NewProp_CurrentWeapon = new(OuterClass, TEXT("CurrentWeapon"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurrentWeapon, AAmethystCharacter), 0x0000080100002020, Z_Construct_UClass_AAmethystWeapon_NoRegister());
			NewProp_CurrentWeapon->RepNotifyFunc = FName(TEXT("OnRep_CurrentWeapon"));
			UProperty* NewProp_Inventory = new(OuterClass, TEXT("Inventory"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Inventory, AAmethystCharacter), 0x0000080000002020);
			UProperty* NewProp_Inventory_Inner = new(NewProp_Inventory, TEXT("Inventory"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FPostConstructInitializeProperties(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AAmethystWeapon_NoRegister());
			UProperty* NewProp_DefaultInventoryClasses = new(OuterClass, TEXT("DefaultInventoryClasses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DefaultInventoryClasses, AAmethystCharacter), 0x0000080000010001);
			UProperty* NewProp_DefaultInventoryClasses_Inner = new(NewProp_DefaultInventoryClasses, TEXT("DefaultInventoryClasses"), RF_Public|RF_Transient|RF_Native) UClassProperty(FPostConstructInitializeProperties(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AAmethystWeapon_NoRegister());
			UProperty* NewProp_WeaponAttachPoint = new(OuterClass, TEXT("WeaponAttachPoint"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(WeaponAttachPoint, AAmethystCharacter), 0x0000080000010001);
			UProperty* NewProp_Mesh1P = new(OuterClass, TEXT("Mesh1P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Mesh1P, AAmethystCharacter), 0x00000800044b0009, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_GetAimOffsets());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_GetRunningSpeedModifier());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_GetTargetingSpeedModifier());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_GetWeapon());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_IsFiring());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_IsFirstPerson());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_IsRunning());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_IsTargeting());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_OnRep_CurrentWeapon());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_ServerEquipWeapon());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_ServerSetRunning());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystCharacter_ServerSetTargeting());
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation AI|Navigation Pawn|Character|InternalEvents"));
			MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/AmethystCharacter.h"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_Health, TEXT("Category"), TEXT("Health"));
			MetaData->SetValue(NewProp_Health, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_Health, TEXT("ToolTip"), TEXT("Current health of the Pawn"));
			MetaData->SetValue(NewProp_bIsDying, TEXT("Category"), TEXT("Health"));
			MetaData->SetValue(NewProp_bIsDying, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_bIsDying, TEXT("ToolTip"), TEXT("Identifies if pawn is in its dying state"));
			MetaData->SetValue(NewProp_LowHealthWarningPlayer, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_LowHealthWarningPlayer, TEXT("ToolTip"), TEXT("hook to looped low health sound used to stop/adjust volume"));
			MetaData->SetValue(NewProp_RunLoopAC, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_RunLoopAC, TEXT("ToolTip"), TEXT("used to manipulate with run loop sound"));
			MetaData->SetValue(NewProp_TargetingSound, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(NewProp_TargetingSound, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_TargetingSound, TEXT("ToolTip"), TEXT("sound played when targeting state changes"));
			MetaData->SetValue(NewProp_RunStopSound, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(NewProp_RunStopSound, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_RunStopSound, TEXT("ToolTip"), TEXT("sound played when stop running"));
			MetaData->SetValue(NewProp_RunLoopSound, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(NewProp_RunLoopSound, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_RunLoopSound, TEXT("ToolTip"), TEXT("sound played when running"));
			MetaData->SetValue(NewProp_LowHealthSound, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(NewProp_LowHealthSound, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_LowHealthSound, TEXT("ToolTip"), TEXT("sound played when health is low"));
			MetaData->SetValue(NewProp_RespawnSound, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(NewProp_RespawnSound, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_RespawnSound, TEXT("ToolTip"), TEXT("sound played on respawn"));
			MetaData->SetValue(NewProp_RespawnFX, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(NewProp_RespawnFX, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_RespawnFX, TEXT("ToolTip"), TEXT("effect played on respawn"));
			MetaData->SetValue(NewProp_DeathSound, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(NewProp_DeathSound, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_DeathSound, TEXT("ToolTip"), TEXT("sound played on death, local player only"));
			MetaData->SetValue(NewProp_DeathAnim, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(NewProp_DeathAnim, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_DeathAnim, TEXT("ToolTip"), TEXT("animation played on death"));
			MetaData->SetValue(NewProp_MeshMIDs, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_MeshMIDs, TEXT("ToolTip"), TEXT("material instances for setting team color in mesh (3rd person view)"));
			MetaData->SetValue(NewProp_bWantsToRun, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_bWantsToRun, TEXT("ToolTip"), TEXT("current running state"));
			MetaData->SetValue(NewProp_RunningSpeedModifier, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(NewProp_RunningSpeedModifier, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_RunningSpeedModifier, TEXT("ToolTip"), TEXT("modifier for max movement speed"));
			MetaData->SetValue(NewProp_bIsTargeting, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_bIsTargeting, TEXT("ToolTip"), TEXT("current targeting state"));
			MetaData->SetValue(NewProp_TargetingSpeedModifier, TEXT("Category"), TEXT("Inventory"));
			MetaData->SetValue(NewProp_TargetingSpeedModifier, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_TargetingSpeedModifier, TEXT("ToolTip"), TEXT("modifier for max movement speed"));
			MetaData->SetValue(NewProp_CurrentWeapon, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_CurrentWeapon, TEXT("ToolTip"), TEXT("currently equipped weapon"));
			MetaData->SetValue(NewProp_Inventory, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_Inventory, TEXT("ToolTip"), TEXT("weapons in inventory"));
			MetaData->SetValue(NewProp_DefaultInventoryClasses, TEXT("Category"), TEXT("Inventory"));
			MetaData->SetValue(NewProp_DefaultInventoryClasses, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_DefaultInventoryClasses, TEXT("ToolTip"), TEXT("default inventory list"));
			MetaData->SetValue(NewProp_WeaponAttachPoint, TEXT("Category"), TEXT("Inventory"));
			MetaData->SetValue(NewProp_WeaponAttachPoint, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_WeaponAttachPoint, TEXT("ToolTip"), TEXT("socket or bone name for attaching weapon mesh"));
			MetaData->SetValue(NewProp_Mesh1P, TEXT("Category"), TEXT("Mesh"));
			MetaData->SetValue(NewProp_Mesh1P, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharacter.h"));
			MetaData->SetValue(NewProp_Mesh1P, TEXT("ToolTip"), TEXT("pawn mesh: 1st person view"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AAmethystCharacter(Z_Construct_UClass_AAmethystCharacter);
	UFunction* Z_Construct_UFunction_AAmethystBot_PerformMeleeAttack()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystBot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("PerformMeleeAttack"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystBot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AAmethystBot_NoRegister()
	{
		return AAmethystBot::StaticClass();
	}
	UClass* Z_Construct_UClass_AAmethystBot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AAmethystCharacter();
			Z_Construct_UPackage_amethystforest();
			OuterClass = AAmethystBot::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00900080;

			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystBot_PerformMeleeAttack());

			UProperty* NewProp_BotBehavior = new(OuterClass, TEXT("BotBehavior"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BotBehavior, AAmethystBot), 0x0000000000000001, Z_Construct_UClass_UBehaviorTree_NoRegister());
			UProperty* NewProp_AttackDamage = new(OuterClass, TEXT("AttackDamage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AttackDamage, AAmethystBot), 0x0000000000010001);
			UProperty* NewProp_AttackRange = new(OuterClass, TEXT("AttackRange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AttackRange, AAmethystBot), 0x0000000000010001);
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystBot_PerformMeleeAttack());
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation AI|Navigation Pawn|Character|InternalEvents"));
			MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Bots/AmethystBot.h"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystBot.h"));
			MetaData->SetValue(NewProp_BotBehavior, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(NewProp_BotBehavior, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystBot.h"));
			MetaData->SetValue(NewProp_AttackDamage, TEXT("Category"), TEXT("Behaviour"));
			MetaData->SetValue(NewProp_AttackDamage, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystBot.h"));
			MetaData->SetValue(NewProp_AttackRange, TEXT("Category"), TEXT("Behaviour"));
			MetaData->SetValue(NewProp_AttackRange, TEXT("ModuleRelativePath"), TEXT("Classes/Bots/AmethystBot.h"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AAmethystBot(Z_Construct_UClass_AAmethystBot);
	UClass* Z_Construct_UClass_UAmethystCharMovementComponent_NoRegister()
	{
		return UAmethystCharMovementComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UAmethystCharMovementComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCharacterMovementComponent();
			Z_Construct_UPackage_amethystforest();
			OuterClass = UAmethystCharMovementComponent::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00B00080;


			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
			MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/AmethystCharMovementComponent.h"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Player/AmethystCharMovementComponent.h"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAmethystCharMovementComponent(Z_Construct_UClass_UAmethystCharMovementComponent);
	UClass* Z_Construct_UClass_UAmethystDamageType_NoRegister()
	{
		return UAmethystDamageType::StaticClass();
	}
	UClass* Z_Construct_UClass_UAmethystDamageType()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDamageType();
			Z_Construct_UPackage_amethystforest();
			OuterClass = UAmethystDamageType::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00010080;


			UProperty* NewProp_KilledForceFeedback = new(OuterClass, TEXT("KilledForceFeedback"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(KilledForceFeedback, UAmethystDamageType), 0x0000000000010011, Z_Construct_UClass_UForceFeedbackEffect_NoRegister());
			UProperty* NewProp_HitForceFeedback = new(OuterClass, TEXT("HitForceFeedback"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HitForceFeedback, UAmethystDamageType), 0x0000000000010011, Z_Construct_UClass_UForceFeedbackEffect_NoRegister());
			UProperty* NewProp_KillIcon = new(OuterClass, TEXT("KillIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(KillIcon, UAmethystDamageType), 0x0000000000010011, Z_Construct_UScriptStruct_UCanvas_FCanvasIcon());
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Weapon/AmethystDamageType.h"));
			MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystDamageType.h"));
			MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("// DamageType class that specifies an icon to display"));
			MetaData->SetValue(NewProp_KilledForceFeedback, TEXT("Category"), TEXT("Effects"));
			MetaData->SetValue(NewProp_KilledForceFeedback, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystDamageType.h"));
			MetaData->SetValue(NewProp_KilledForceFeedback, TEXT("ToolTip"), TEXT("force feedback effect to play on a player killed by this damage type"));
			MetaData->SetValue(NewProp_HitForceFeedback, TEXT("Category"), TEXT("Effects"));
			MetaData->SetValue(NewProp_HitForceFeedback, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystDamageType.h"));
			MetaData->SetValue(NewProp_HitForceFeedback, TEXT("ToolTip"), TEXT("force feedback effect to play on a player hit by this damage type"));
			MetaData->SetValue(NewProp_KillIcon, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_KillIcon, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystDamageType.h"));
			MetaData->SetValue(NewProp_KillIcon, TEXT("ToolTip"), TEXT("icon displayed in death messages log when killed with this weapon"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAmethystDamageType(Z_Construct_UClass_UAmethystDamageType);
	UClass* Z_Construct_UClass_AamethystforestGameMode_NoRegister()
	{
		return AamethystforestGameMode::StaticClass();
	}
	UClass* Z_Construct_UClass_AamethystforestGameMode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameMode();
			Z_Construct_UPackage_amethystforest();
			OuterClass = AamethystforestGameMode::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x009002A4;


			OuterClass->ClassConfigName = FName(TEXT("Game"));
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input Movement Collision Rendering Utilities|Transformation Info MovementReplication Replication Actor"));
			MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Game/amethystforestGameMode.h"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Game/amethystforestGameMode.h"));
			MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AamethystforestGameMode(Z_Construct_UClass_AamethystforestGameMode);
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ClientEndOnlineGame()
	{
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ClientEndOnlineGame"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x01020CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Ends the online game using the session name in the PlayerState"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ClientGameStarted()
	{
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ClientGameStarted"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x01020CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("notify player about started match"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ClientSetSpectatorCamera()
	{
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ClientSetSpectatorCamera"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x01820CC0, 65535, sizeof(amethystforestPlayerController_eventClientSetSpectatorCamera_Parms));
			UProperty* NewProp_CameraRotation = new(ReturnFunction, TEXT("CameraRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CameraRotation, amethystforestPlayerController_eventClientSetSpectatorCamera_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FRotator());
			UProperty* NewProp_CameraLocation = new(ReturnFunction, TEXT("CameraLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CameraLocation, amethystforestPlayerController_eventClientSetSpectatorCamera_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UObject_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("sets spectator location and rotation"));
			MetaData->SetValue(NewProp_CameraRotation, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(NewProp_CameraLocation, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ClientStartOnlineGame()
	{
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ClientStartOnlineGame"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x01020CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Starts the online game using the session name in the PlayerState"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_Say()
	{
		struct amethystforestPlayerController_eventSay_Parms
		{
			FString Msg;
		};
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("Say"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00020600, 65535, sizeof(amethystforestPlayerController_eventSay_Parms));
			UProperty* NewProp_Msg = new(ReturnFunction, TEXT("Msg"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Msg, amethystforestPlayerController_eventSay_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Local function say a string"));
			MetaData->SetValue(NewProp_Msg, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ServerCheat()
	{
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerCheat"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80220CC0, 65535, sizeof(amethystforestPlayerController_eventServerCheat_Parms));
			UProperty* NewProp_Msg = new(ReturnFunction, TEXT("Msg"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Msg, amethystforestPlayerController_eventServerCheat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("sends cheat message"));
			MetaData->SetValue(NewProp_Msg, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ServerSay()
	{
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerSay"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80220C40, 65535, sizeof(amethystforestPlayerController_eventServerSay_Parms));
			UProperty* NewProp_Msg = new(ReturnFunction, TEXT("Msg"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Msg, amethystforestPlayerController_eventServerSay_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("RPC for clients to talk to server"));
			MetaData->SetValue(NewProp_Msg, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_ServerSuicide()
	{
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerSuicide"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Notifies the server that the client has suicided"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_SetGodMode()
	{
		struct amethystforestPlayerController_eventSetGodMode_Parms
		{
			bool bEnable;
		};
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("SetGodMode"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00020601, 65535, sizeof(amethystforestPlayerController_eventSetGodMode_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnable, amethystforestPlayerController_eventSetGodMode_Parms, bool);
			UProperty* NewProp_bEnable = new(ReturnFunction, TEXT("bEnable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnable, amethystforestPlayerController_eventSetGodMode_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bEnable, amethystforestPlayerController_eventSetGodMode_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("set god mode cheat"));
			MetaData->SetValue(NewProp_bEnable, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_SimulateInputKey()
	{
		struct amethystforestPlayerController_eventSimulateInputKey_Parms
		{
			struct FKey Key;
			bool bPressed;
		};
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("SimulateInputKey"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x04020401, 65535, sizeof(amethystforestPlayerController_eventSimulateInputKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPressed, amethystforestPlayerController_eventSimulateInputKey_Parms, bool);
			UProperty* NewProp_bPressed = new(ReturnFunction, TEXT("bPressed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPressed, amethystforestPlayerController_eventSimulateInputKey_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bPressed, amethystforestPlayerController_eventSimulateInputKey_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, amethystforestPlayerController_eventSimulateInputKey_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_UInputCoreTypes_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bPressed"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("used for input simulation from blueprint (for automatic perf tests)"));
			MetaData->SetValue(NewProp_bPressed, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(NewProp_Key, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AamethystforestPlayerController_Suicide()
	{
		UClass* OuterClass=Z_Construct_UClass_AamethystforestPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("Suicide"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Causes the player to commit suicide"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AamethystforestPlayerController_NoRegister()
	{
		return AamethystforestPlayerController::StaticClass();
	}
	UClass* Z_Construct_UClass_AamethystforestPlayerController()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APlayerController();
			Z_Construct_UPackage_amethystforest();
			OuterClass = AamethystforestPlayerController::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00800284;

			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_ClientEndOnlineGame());
			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_ClientGameStarted());
			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_ClientSetSpectatorCamera());
			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_ClientStartOnlineGame());
			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_Say());
			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_ServerCheat());
			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_ServerSay());
			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_ServerSuicide());
			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_SetGodMode());
			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_SimulateInputKey());
			OuterClass->LinkChild(Z_Construct_UFunction_AamethystforestPlayerController_Suicide());

			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGodMode, AamethystforestPlayerController, uint8);
			UProperty* NewProp_bGodMode = new(OuterClass, TEXT("bGodMode"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGodMode, AamethystforestPlayerController), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bGodMode, AamethystforestPlayerController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHealthRegen, AamethystforestPlayerController, uint8);
			UProperty* NewProp_bHealthRegen = new(OuterClass, TEXT("bHealthRegen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHealthRegen, AamethystforestPlayerController), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bHealthRegen, AamethystforestPlayerController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInfiniteClip, AamethystforestPlayerController, uint8);
			UProperty* NewProp_bInfiniteClip = new(OuterClass, TEXT("bInfiniteClip"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInfiniteClip, AamethystforestPlayerController), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bInfiniteClip, AamethystforestPlayerController), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInfiniteAmmo, AamethystforestPlayerController, uint8);
			UProperty* NewProp_bInfiniteAmmo = new(OuterClass, TEXT("bInfiniteAmmo"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInfiniteAmmo, AamethystforestPlayerController), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bInfiniteAmmo, AamethystforestPlayerController), sizeof(uint8), false);
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_ClientEndOnlineGame());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_ClientGameStarted());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_ClientSetSpectatorCamera());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_ClientStartOnlineGame());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_Say());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_ServerCheat());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_ServerSay());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_ServerSuicide());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_SetGodMode());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_SimulateInputKey());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AamethystforestPlayerController_Suicide());
			OuterClass->ClassConfigName = FName(TEXT("Game"));
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Rendering Utilities|Transformation"));
			MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/amethystforestPlayerController.h"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(NewProp_bGodMode, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(NewProp_bGodMode, TEXT("ToolTip"), TEXT("god mode cheat"));
			MetaData->SetValue(NewProp_bHealthRegen, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(NewProp_bHealthRegen, TEXT("ToolTip"), TEXT("health regen cheat"));
			MetaData->SetValue(NewProp_bInfiniteClip, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(NewProp_bInfiniteClip, TEXT("ToolTip"), TEXT("infinite clip cheat"));
			MetaData->SetValue(NewProp_bInfiniteAmmo, TEXT("ModuleRelativePath"), TEXT("Classes/Player/amethystforestPlayerController.h"));
			MetaData->SetValue(NewProp_bInfiniteAmmo, TEXT("ToolTip"), TEXT("infinite ammo cheat"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AamethystforestPlayerController(Z_Construct_UClass_AamethystforestPlayerController);
	UScriptStruct* Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponAnim()
	{
		UStruct* Outer=Z_Construct_UClass_AAmethystWeapon();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(Outer, TEXT("WeaponAnim"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FPostConstructInitializeProperties(), NULL, new UScriptStruct::TCppStructOps<FWeaponAnim>, EStructFlags(0x00000001));
			UProperty* NewProp_Pawn3P = new(ReturnStruct, TEXT("Pawn3P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Pawn3P, FWeaponAnim), 0x0000000000010001, Z_Construct_UClass_UAnimMontage_NoRegister());
			UProperty* NewProp_Pawn1P = new(ReturnStruct, TEXT("Pawn1P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Pawn1P, FWeaponAnim), 0x0000000000010001, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_Pawn3P, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(NewProp_Pawn3P, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_Pawn3P, TEXT("ToolTip"), TEXT("animation played on pawn (3rd person view)"));
			MetaData->SetValue(NewProp_Pawn1P, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(NewProp_Pawn1P, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_Pawn1P, TEXT("ToolTip"), TEXT("animation played on pawn (1st person view)"));
#endif
		}
		return ReturnStruct;
	}
	UScriptStruct* Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponData()
	{
		UStruct* Outer=Z_Construct_UClass_AAmethystWeapon();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(Outer, TEXT("WeaponData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FPostConstructInitializeProperties(), NULL, new UScriptStruct::TCppStructOps<FWeaponData>, EStructFlags(0x00000001));
			UProperty* NewProp_NoAnimReloadDuration = new(ReturnStruct, TEXT("NoAnimReloadDuration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NoAnimReloadDuration, FWeaponData), 0x0000000000010001);
			UProperty* NewProp_TimeBetweenShots = new(ReturnStruct, TEXT("TimeBetweenShots"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeBetweenShots, FWeaponData), 0x0000000000010001);
			UProperty* NewProp_InitialClips = new(ReturnStruct, TEXT("InitialClips"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InitialClips, FWeaponData), 0x0000000000010001);
			UProperty* NewProp_AmmoPerClip = new(ReturnStruct, TEXT("AmmoPerClip"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AmmoPerClip, FWeaponData), 0x0000000000010001);
			UProperty* NewProp_MaxAmmo = new(ReturnStruct, TEXT("MaxAmmo"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxAmmo, FWeaponData), 0x0000000000010001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInfiniteClip, FWeaponData, bool);
			UProperty* NewProp_bInfiniteClip = new(ReturnStruct, TEXT("bInfiniteClip"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInfiniteClip, FWeaponData), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bInfiniteClip, FWeaponData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInfiniteAmmo, FWeaponData, bool);
			UProperty* NewProp_bInfiniteAmmo = new(ReturnStruct, TEXT("bInfiniteAmmo"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInfiniteAmmo, FWeaponData), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bInfiniteAmmo, FWeaponData), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_NoAnimReloadDuration, TEXT("Category"), TEXT("WeaponStat"));
			MetaData->SetValue(NewProp_NoAnimReloadDuration, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_NoAnimReloadDuration, TEXT("ToolTip"), TEXT("failsafe reload duration if weapon doesn't have any animation for it"));
			MetaData->SetValue(NewProp_TimeBetweenShots, TEXT("Category"), TEXT("WeaponStat"));
			MetaData->SetValue(NewProp_TimeBetweenShots, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_TimeBetweenShots, TEXT("ToolTip"), TEXT("time between two consecutive shots"));
			MetaData->SetValue(NewProp_InitialClips, TEXT("Category"), TEXT("Ammo"));
			MetaData->SetValue(NewProp_InitialClips, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_InitialClips, TEXT("ToolTip"), TEXT("initial clips"));
			MetaData->SetValue(NewProp_AmmoPerClip, TEXT("Category"), TEXT("Ammo"));
			MetaData->SetValue(NewProp_AmmoPerClip, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_AmmoPerClip, TEXT("ToolTip"), TEXT("clip size"));
			MetaData->SetValue(NewProp_MaxAmmo, TEXT("Category"), TEXT("Ammo"));
			MetaData->SetValue(NewProp_MaxAmmo, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_MaxAmmo, TEXT("ToolTip"), TEXT("max ammo"));
			MetaData->SetValue(NewProp_bInfiniteClip, TEXT("Category"), TEXT("Ammo"));
			MetaData->SetValue(NewProp_bInfiniteClip, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_bInfiniteClip, TEXT("ToolTip"), TEXT("infinite ammo in clip, no reload required"));
			MetaData->SetValue(NewProp_bInfiniteAmmo, TEXT("Category"), TEXT("Ammo"));
			MetaData->SetValue(NewProp_bInfiniteAmmo, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_bInfiniteAmmo, TEXT("ToolTip"), TEXT("inifite ammo for reloads"));
#endif
		}
		return ReturnStruct;
	}
	UFunction* Z_Construct_UFunction_AAmethystWeapon_ClientStartReload()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ClientStartReload"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x01020CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("trigger reload from server"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystWeapon_GetPawnOwner()
	{
		struct AmethystWeapon_eventGetPawnOwner_Parms
		{
			class AAmethystCharacter* ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_AAmethystWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("GetPawnOwner"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x54020401, 65535, sizeof(AmethystWeapon_eventGetPawnOwner_Parms));
			UProperty* NewProp_ReturnValue = new(ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AmethystWeapon_eventGetPawnOwner_Parms), 0x0000000000000580, Z_Construct_UClass_AAmethystCharacter_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get pawn owner"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystWeapon_OnRep_BurstCounter()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("OnRep_BurstCounter"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystWeapon_OnRep_MyPawn()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("OnRep_MyPawn"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replication & effects"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystWeapon_OnRep_Reload()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("OnRep_Reload"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystWeapon_ServerHandleFiring()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerHandleFiring"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("[server] fire & update ammo"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystWeapon_ServerStartFire()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerStartFire"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Input - server side"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystWeapon_ServerStartReload()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerStartReload"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystWeapon_ServerStopFire()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerStopFire"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AAmethystWeapon_ServerStopReload()
	{
		UClass* OuterClass=Z_Construct_UClass_AAmethystWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(OuterClass, TEXT("ServerStopReload"), RF_Public|RF_Transient|RF_Native) UFunction(FPostConstructInitializeProperties(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AAmethystWeapon_NoRegister()
	{
		return AAmethystWeapon::StaticClass();
	}
	UClass* Z_Construct_UClass_AAmethystWeapon()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_amethystforest();
			OuterClass = AAmethystWeapon::StaticClass();
			UObjectForceRegistration(OuterClass);
			OuterClass->ClassFlags |= 0x00800081;

			OuterClass->LinkChild(Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponAnim());
			OuterClass->LinkChild(Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponData());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystWeapon_ClientStartReload());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystWeapon_GetPawnOwner());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystWeapon_OnRep_BurstCounter());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystWeapon_OnRep_MyPawn());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystWeapon_OnRep_Reload());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystWeapon_ServerHandleFiring());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystWeapon_ServerStartFire());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystWeapon_ServerStartReload());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystWeapon_ServerStopFire());
			OuterClass->LinkChild(Z_Construct_UFunction_AAmethystWeapon_ServerStopReload());

			UProperty* NewProp_BurstCounter = new(OuterClass, TEXT("BurstCounter"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(BurstCounter, AAmethystWeapon), 0x0000080100002020);
			NewProp_BurstCounter->RepNotifyFunc = FName(TEXT("OnRep_BurstCounter"));
			UProperty* NewProp_CurrentAmmoInClip = new(OuterClass, TEXT("CurrentAmmoInClip"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CurrentAmmoInClip, AAmethystWeapon), 0x0000080000002020);
			UProperty* NewProp_CurrentAmmo = new(OuterClass, TEXT("CurrentAmmo"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CurrentAmmo, AAmethystWeapon), 0x0000080000002020);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPendingReload, AAmethystWeapon, uint8);
			UProperty* NewProp_bPendingReload = new(OuterClass, TEXT("bPendingReload"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPendingReload, AAmethystWeapon), 0x0000080100002020, CPP_BOOL_PROPERTY_BITMASK(bPendingReload, AAmethystWeapon), sizeof(uint8), false);
			NewProp_bPendingReload->RepNotifyFunc = FName(TEXT("OnRep_Reload"));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopedFireAnim, AAmethystWeapon, uint8);
			UProperty* NewProp_bLoopedFireAnim = new(OuterClass, TEXT("bLoopedFireAnim"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopedFireAnim, AAmethystWeapon), 0x0000080000010001, CPP_BOOL_PROPERTY_BITMASK(bLoopedFireAnim, AAmethystWeapon), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopedFireSound, AAmethystWeapon, uint8);
			UProperty* NewProp_bLoopedFireSound = new(OuterClass, TEXT("bLoopedFireSound"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopedFireSound, AAmethystWeapon), 0x0000080000010001, CPP_BOOL_PROPERTY_BITMASK(bLoopedFireSound, AAmethystWeapon), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopedMuzzleFX, AAmethystWeapon, uint8);
			UProperty* NewProp_bLoopedMuzzleFX = new(OuterClass, TEXT("bLoopedMuzzleFX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopedMuzzleFX, AAmethystWeapon), 0x0000080000010001, CPP_BOOL_PROPERTY_BITMASK(bLoopedMuzzleFX, AAmethystWeapon), sizeof(uint8), false);
			UProperty* NewProp_FireAnim = new(OuterClass, TEXT("FireAnim"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FireAnim, AAmethystWeapon), 0x0000080000010001, Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponAnim());
			UProperty* NewProp_EquipAnim = new(OuterClass, TEXT("EquipAnim"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EquipAnim, AAmethystWeapon), 0x0000080000010001, Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponAnim());
			UProperty* NewProp_EquipSound = new(OuterClass, TEXT("EquipSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EquipSound, AAmethystWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_ReloadAnim = new(OuterClass, TEXT("ReloadAnim"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReloadAnim, AAmethystWeapon), 0x0000080000010001, Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponAnim());
			UProperty* NewProp_ReloadSound = new(OuterClass, TEXT("ReloadSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReloadSound, AAmethystWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_OutOfAmmoSound = new(OuterClass, TEXT("OutOfAmmoSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OutOfAmmoSound, AAmethystWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_FireFinishSound = new(OuterClass, TEXT("FireFinishSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireFinishSound, AAmethystWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_FireLoopSound = new(OuterClass, TEXT("FireLoopSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireLoopSound, AAmethystWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_FireSound = new(OuterClass, TEXT("FireSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireSound, AAmethystWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
			UProperty* NewProp_FireForceFeedback = new(OuterClass, TEXT("FireForceFeedback"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireForceFeedback, AAmethystWeapon), 0x0000080000010001, Z_Construct_UClass_UForceFeedbackEffect_NoRegister());
			UProperty* NewProp_FireCameraShake = new(OuterClass, TEXT("FireCameraShake"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(FireCameraShake, AAmethystWeapon), 0x0000080000010001, Z_Construct_UClass_UCameraShake_NoRegister());
			UProperty* NewProp_MuzzlePSCSecondary = new(OuterClass, TEXT("MuzzlePSCSecondary"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MuzzlePSCSecondary, AAmethystWeapon), 0x0000080004082008, Z_Construct_UClass_UParticleSystemComponent_NoRegister());
			UProperty* NewProp_MuzzlePSC = new(OuterClass, TEXT("MuzzlePSC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MuzzlePSC, AAmethystWeapon), 0x0000080004082008, Z_Construct_UClass_UParticleSystemComponent_NoRegister());
			UProperty* NewProp_MuzzleFX = new(OuterClass, TEXT("MuzzleFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MuzzleFX, AAmethystWeapon), 0x0000080000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
			UProperty* NewProp_MuzzleAttachPoint = new(OuterClass, TEXT("MuzzleAttachPoint"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(MuzzleAttachPoint, AAmethystWeapon), 0x0000080000010001);
			UProperty* NewProp_FireAC = new(OuterClass, TEXT("FireAC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireAC, AAmethystWeapon), 0x0000080004082008, Z_Construct_UClass_UAudioComponent_NoRegister());
			UProperty* NewProp_Mesh3P = new(OuterClass, TEXT("Mesh3P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Mesh3P, AAmethystWeapon), 0x00000800044b0009, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			UProperty* NewProp_Mesh1P = new(OuterClass, TEXT("Mesh1P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Mesh1P, AAmethystWeapon), 0x00000800044b0009, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
			UProperty* NewProp_WeaponConfig = new(OuterClass, TEXT("WeaponConfig"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WeaponConfig, AAmethystWeapon), 0x0000080000010001, Z_Construct_UScriptStruct_AAmethystWeapon_FWeaponData());
			UProperty* NewProp_MyPawn = new(OuterClass, TEXT("MyPawn"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyPawn, AAmethystWeapon), 0x0000080100002020, Z_Construct_UClass_AAmethystCharacter_NoRegister());
			NewProp_MyPawn->RepNotifyFunc = FName(TEXT("OnRep_MyPawn"));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHideCrosshairWhileNotAiming, AAmethystWeapon, bool);
			UProperty* NewProp_bHideCrosshairWhileNotAiming = new(OuterClass, TEXT("bHideCrosshairWhileNotAiming"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHideCrosshairWhileNotAiming, AAmethystWeapon), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bHideCrosshairWhileNotAiming, AAmethystWeapon), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseCustomAimingCrosshair, AAmethystWeapon, bool);
			UProperty* NewProp_UseCustomAimingCrosshair = new(OuterClass, TEXT("UseCustomAimingCrosshair"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseCustomAimingCrosshair, AAmethystWeapon), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(UseCustomAimingCrosshair, AAmethystWeapon), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseCustomCrosshair, AAmethystWeapon, bool);
			UProperty* NewProp_UseCustomCrosshair = new(OuterClass, TEXT("UseCustomCrosshair"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseCustomCrosshair, AAmethystWeapon), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(UseCustomCrosshair, AAmethystWeapon), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseLaserDot, AAmethystWeapon, bool);
			UProperty* NewProp_UseLaserDot = new(OuterClass, TEXT("UseLaserDot"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FPostConstructInitializeProperties(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseLaserDot, AAmethystWeapon), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(UseLaserDot, AAmethystWeapon), sizeof(bool), true);
			UProperty* NewProp_AimingCrosshair = new(OuterClass, TEXT("AimingCrosshair"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AimingCrosshair, AAmethystWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_UCanvas_FCanvasIcon());
			NewProp_AimingCrosshair->ArrayDim = CPP_ARRAY_DIM(AimingCrosshair, AAmethystWeapon);
			UProperty* NewProp_Crosshair = new(OuterClass, TEXT("Crosshair"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Crosshair, AAmethystWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_UCanvas_FCanvasIcon());
			NewProp_Crosshair->ArrayDim = CPP_ARRAY_DIM(Crosshair, AAmethystWeapon);
			UProperty* NewProp_SecondaryClipIconOffset = new(OuterClass, TEXT("SecondaryClipIconOffset"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SecondaryClipIconOffset, AAmethystWeapon), 0x0000000000010001);
			UProperty* NewProp_PrimaryClipIconOffset = new(OuterClass, TEXT("PrimaryClipIconOffset"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PrimaryClipIconOffset, AAmethystWeapon), 0x0000000000010001);
			UProperty* NewProp_AmmoIconsCount = new(OuterClass, TEXT("AmmoIconsCount"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AmmoIconsCount, AAmethystWeapon), 0x0000000000010001);
			UProperty* NewProp_SecondaryClipIcon = new(OuterClass, TEXT("SecondaryClipIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SecondaryClipIcon, AAmethystWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_UCanvas_FCanvasIcon());
			UProperty* NewProp_PrimaryClipIcon = new(OuterClass, TEXT("PrimaryClipIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PrimaryClipIcon, AAmethystWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_UCanvas_FCanvasIcon());
			UProperty* NewProp_SecondaryIcon = new(OuterClass, TEXT("SecondaryIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SecondaryIcon, AAmethystWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_UCanvas_FCanvasIcon());
			UProperty* NewProp_PrimaryIcon = new(OuterClass, TEXT("PrimaryIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PrimaryIcon, AAmethystWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_UCanvas_FCanvasIcon());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystWeapon_ClientStartReload());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystWeapon_GetPawnOwner());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystWeapon_OnRep_BurstCounter());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystWeapon_OnRep_MyPawn());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystWeapon_OnRep_Reload());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystWeapon_ServerHandleFiring());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystWeapon_ServerStartFire());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystWeapon_ServerStartReload());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystWeapon_ServerStopFire());
			OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AAmethystWeapon_ServerStopReload());
			OuterClass->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
			MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Weapon/AmethystWeapon.h"));
			MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
			MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_BurstCounter, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_BurstCounter, TEXT("ToolTip"), TEXT("burst counter, used for replicating fire events to remote clients"));
			MetaData->SetValue(NewProp_CurrentAmmoInClip, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_CurrentAmmoInClip, TEXT("ToolTip"), TEXT("current ammo - inside clip"));
			MetaData->SetValue(NewProp_CurrentAmmo, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_CurrentAmmo, TEXT("ToolTip"), TEXT("current total ammo"));
			MetaData->SetValue(NewProp_bPendingReload, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_bPendingReload, TEXT("ToolTip"), TEXT("is reload animation playing?"));
			MetaData->SetValue(NewProp_bLoopedFireAnim, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(NewProp_bLoopedFireAnim, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_bLoopedFireAnim, TEXT("ToolTip"), TEXT("is fire animation looped?"));
			MetaData->SetValue(NewProp_bLoopedFireSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_bLoopedFireSound, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_bLoopedFireSound, TEXT("ToolTip"), TEXT("is fire sound looped?"));
			MetaData->SetValue(NewProp_bLoopedMuzzleFX, TEXT("Category"), TEXT("Effects"));
			MetaData->SetValue(NewProp_bLoopedMuzzleFX, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_bLoopedMuzzleFX, TEXT("ToolTip"), TEXT("is muzzle FX looped?"));
			MetaData->SetValue(NewProp_FireAnim, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(NewProp_FireAnim, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_FireAnim, TEXT("ToolTip"), TEXT("fire animations"));
			MetaData->SetValue(NewProp_EquipAnim, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(NewProp_EquipAnim, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_EquipAnim, TEXT("ToolTip"), TEXT("equip animations"));
			MetaData->SetValue(NewProp_EquipSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_EquipSound, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_EquipSound, TEXT("ToolTip"), TEXT("equip sound"));
			MetaData->SetValue(NewProp_ReloadAnim, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(NewProp_ReloadAnim, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_ReloadAnim, TEXT("ToolTip"), TEXT("reload animations"));
			MetaData->SetValue(NewProp_ReloadSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_ReloadSound, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_ReloadSound, TEXT("ToolTip"), TEXT("reload sound"));
			MetaData->SetValue(NewProp_OutOfAmmoSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_OutOfAmmoSound, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_OutOfAmmoSound, TEXT("ToolTip"), TEXT("out of ammo sound"));
			MetaData->SetValue(NewProp_FireFinishSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_FireFinishSound, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_FireFinishSound, TEXT("ToolTip"), TEXT("finished burst sound (bLoopedFireSound set)"));
			MetaData->SetValue(NewProp_FireLoopSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_FireLoopSound, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_FireLoopSound, TEXT("ToolTip"), TEXT("looped fire sound (bLoopedFireSound set)"));
			MetaData->SetValue(NewProp_FireSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_FireSound, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_FireSound, TEXT("ToolTip"), TEXT("single fire sound (bLoopedFireSound not set)"));
			MetaData->SetValue(NewProp_FireForceFeedback, TEXT("Category"), TEXT("Effects"));
			MetaData->SetValue(NewProp_FireForceFeedback, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_FireForceFeedback, TEXT("ToolTip"), TEXT("force feedback effect to play when the weapon is fired"));
			MetaData->SetValue(NewProp_FireCameraShake, TEXT("Category"), TEXT("Effects"));
			MetaData->SetValue(NewProp_FireCameraShake, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_FireCameraShake, TEXT("ToolTip"), TEXT("camera shake on firing"));
			MetaData->SetValue(NewProp_MuzzlePSCSecondary, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_MuzzlePSCSecondary, TEXT("ToolTip"), TEXT("spawned component for second muzzle FX (Needed for split screen)"));
			MetaData->SetValue(NewProp_MuzzlePSC, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_MuzzlePSC, TEXT("ToolTip"), TEXT("spawned component for muzzle FX"));
			MetaData->SetValue(NewProp_MuzzleFX, TEXT("Category"), TEXT("Effects"));
			MetaData->SetValue(NewProp_MuzzleFX, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_MuzzleFX, TEXT("ToolTip"), TEXT("FX for muzzle flash"));
			MetaData->SetValue(NewProp_MuzzleAttachPoint, TEXT("Category"), TEXT("Effects"));
			MetaData->SetValue(NewProp_MuzzleAttachPoint, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_MuzzleAttachPoint, TEXT("ToolTip"), TEXT("name of bone/socket for muzzle in weapon mesh"));
			MetaData->SetValue(NewProp_FireAC, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_FireAC, TEXT("ToolTip"), TEXT("firing audio (bLoopedFireSound set)"));
			MetaData->SetValue(NewProp_Mesh3P, TEXT("Category"), TEXT("Mesh"));
			MetaData->SetValue(NewProp_Mesh3P, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_Mesh3P, TEXT("ToolTip"), TEXT("weapon mesh: 3rd person view"));
			MetaData->SetValue(NewProp_Mesh1P, TEXT("Category"), TEXT("Mesh"));
			MetaData->SetValue(NewProp_Mesh1P, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_Mesh1P, TEXT("ToolTip"), TEXT("weapon mesh: 1st person view"));
			MetaData->SetValue(NewProp_WeaponConfig, TEXT("Category"), TEXT("Config"));
			MetaData->SetValue(NewProp_WeaponConfig, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_WeaponConfig, TEXT("ToolTip"), TEXT("weapon data"));
			MetaData->SetValue(NewProp_MyPawn, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_MyPawn, TEXT("ToolTip"), TEXT("pawn owner"));
			MetaData->SetValue(NewProp_bHideCrosshairWhileNotAiming, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_bHideCrosshairWhileNotAiming, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_bHideCrosshairWhileNotAiming, TEXT("ToolTip"), TEXT("true - crosshair will not be shown unless aiming with the weapon"));
			MetaData->SetValue(NewProp_UseCustomAimingCrosshair, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_UseCustomAimingCrosshair, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_UseCustomAimingCrosshair, TEXT("ToolTip"), TEXT("false = use custom one if set, otherwise default crosshair"));
			MetaData->SetValue(NewProp_UseCustomCrosshair, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_UseCustomCrosshair, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_UseCustomCrosshair, TEXT("ToolTip"), TEXT("false = default crosshair"));
			MetaData->SetValue(NewProp_UseLaserDot, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_UseLaserDot, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_UseLaserDot, TEXT("ToolTip"), TEXT("only use red colored center part of aiming crosshair"));
			MetaData->SetValue(NewProp_AimingCrosshair, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_AimingCrosshair, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_AimingCrosshair, TEXT("ToolTip"), TEXT("crosshair parts icons when targeting (left, top, right, bottom and center)"));
			MetaData->SetValue(NewProp_Crosshair, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_Crosshair, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_Crosshair, TEXT("ToolTip"), TEXT("crosshair parts icons (left, top, right, bottom and center)"));
			MetaData->SetValue(NewProp_SecondaryClipIconOffset, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_SecondaryClipIconOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_SecondaryClipIconOffset, TEXT("ToolTip"), TEXT("defines spacing between secondary ammo icons (left side)"));
			MetaData->SetValue(NewProp_PrimaryClipIconOffset, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_PrimaryClipIconOffset, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_PrimaryClipIconOffset, TEXT("ToolTip"), TEXT("defines spacing between primary ammo icons (left side)"));
			MetaData->SetValue(NewProp_AmmoIconsCount, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_AmmoIconsCount, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_AmmoIconsCount, TEXT("ToolTip"), TEXT("how many icons to draw per clip"));
			MetaData->SetValue(NewProp_SecondaryClipIcon, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_SecondaryClipIcon, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_SecondaryClipIcon, TEXT("ToolTip"), TEXT("bullet icon used to draw secondary clip (left side)"));
			MetaData->SetValue(NewProp_PrimaryClipIcon, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_PrimaryClipIcon, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_PrimaryClipIcon, TEXT("ToolTip"), TEXT("bullet icon used to draw current clip (left side)"));
			MetaData->SetValue(NewProp_SecondaryIcon, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_SecondaryIcon, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_SecondaryIcon, TEXT("ToolTip"), TEXT("icon displayed on the HUD when weapon is secondary"));
			MetaData->SetValue(NewProp_PrimaryIcon, TEXT("Category"), TEXT("HUD"));
			MetaData->SetValue(NewProp_PrimaryIcon, TEXT("ModuleRelativePath"), TEXT("Classes/Weapon/AmethystWeapon.h"));
			MetaData->SetValue(NewProp_PrimaryIcon, TEXT("ToolTip"), TEXT("icon displayed on the HUD when weapon is equipped as primary"));
#endif
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AAmethystWeapon(Z_Construct_UClass_AAmethystWeapon);
	UPackage* Z_Construct_UPackage_amethystforest()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/amethystforest")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0x34255D2E;
			Guid.B = 0xBB30199C;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);
		}
		return ReturnPackage;
	}
#endif

